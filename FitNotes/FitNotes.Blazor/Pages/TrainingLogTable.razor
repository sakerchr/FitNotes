<table class="table table-striped">
    <thead>
        <tr>
            <th>Date</th>
            <th>Exercise</th>
            <th>Weight</th>
            <th>Reps</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var trainingLog in _logsToDisplay)
        {
            <tr>
                <td colspan="5">
                    @trainingLog.Key
                </td>
            </tr>
            foreach (var trainingLogEntry in trainingLog.Value)
            {
                <TrainingLogTableEntry TrainingLog="@trainingLogEntry" />
            }
        }
    </tbody>
</table>


@code {
    [Parameter]
    public List<TrainingLog>? TrainingLogs { get; set; }
    [Parameter]
    public string? Exercise { get; set; }

    private Dictionary<DateOnly, List<TrainingLog>> _logsToDisplay = new();

    protected override void OnParametersSet()
    {
        _logsToDisplay.Clear();
        IEnumerable<TrainingLog> trainingLogs = TrainingLogs;
        if (Exercise is not null)
        {
            trainingLogs = trainingLogs
            .Where(tl => string.Equals(tl.Exercise, Exercise));
        }
        var logGroupings = trainingLogs
        .GroupBy(tl => tl.Date)
        .OrderByDescending(tlGrouping => tlGrouping.Key)
        .Take(100);
        foreach (var logGrouping in logGroupings)
        {
            _logsToDisplay[DateOnly.FromDateTime(logGrouping.Key)] = logGrouping.ToList();
        }

        base.OnParametersSet();
    }
}